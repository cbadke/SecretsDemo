param (
	[string]$OpenSSLExePath = "C:\OpenSSL-Win32\bin\openssl.exe",
	[Parameter(Mandatory=$true)]
	[string]$Subject,
	[Parameter(Mandatory=$true)]
	[System.DateTime]$NotBefore,
	[Parameter(Mandatory=$true)]
	[System.DateTime]$NotAfter,
	[Parameter(Mandatory=$true)]
	[string]$FilePath,
	[System.Security.SecureString] $Password = (Read-Host -AsSecureString -Prompt "Enter private key password"),
	[int] $KeyLength = 4096,
	[string] $KeyAlgorithm = "RSA"
)

$ErrorActionPreference = "Stop"

if (-not (Test-Path -Path $OpenSSLExePath)) {
	Write-Host "Cannot find OpenSSL. This is needed to address KeyVault issue with certs generated by New-SelfSignedCertificate. For more info https://azurecto.com/azure-keyvault-authenticating-with-certificates-and-reading-secrets/"
	exit -1

}

if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)) {
	Write-Host "This command needs to be run as administrator"
	exit -1
}

Resolve-Path $FilePath | Out-Null

$cert = New-SelfSignedCertificate -Subject $Subject `
								  -NotBefore $NotBefore `
								  -NotAfter $NotAfter `
								  -KeyLength $KeyLength `
								  -KeyAlgorithm $KeyAlgorithm

$certPathInStore = "cert:\localMachine\my\$($cert.Thumbprint)"

$privateKeyPath = "$FilePath\$($cert.Thumbprint).pfx"
$pubKeyPath = "$FilePath\$($cert.Thumbprint).cer"

#$privateKey = Export-PfxCertificate -cert $certPathInStore  -FilePath $privateKeyPath -Password $Password
#$publicKey = Export-Certificate -Cert $certPathInStore -Type CERT -FilePath $pubKeyPath

#START HACK TO CONVERT CNG TO OLD KEY STORE 
#this sucks and some day I hope .NET let's me get rid of it
#https://azurecto.com/azure-keyvault-authenticating-with-certificates-and-reading-secrets/

$tmpPfx = New-TemporaryFile
$tmpPem = New-TemporaryFile
$tmpRsa = New-TemporaryFile
$privateKey = Export-PfxCertificate -cert $certPathInStore  -FilePath $tmpPfx -Password $Password
$pwd = ([System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($Password)))
&$OpenSSLExePath pkcs12 -in "$($tmpPfx.FullName)" -nokeys -out "$pubKeyPath" -passin "pass:$pwd" | Out-Null
&$OpenSSLExePath pkcs12 -in "$($tmpPfx.FullName)" -nocerts -out "$($tmpPem.FullName)" -passin "pass:$pwd" -passout "pass:$pwd" | Out-Null
&$OpenSSLExePath rsa -inform PEM -in "$($tmpPem.FullName)" -out "$($tmpRsa.FullName)" -passin "pass:$pwd" -passout "pass:$pwd" | Out-Null
&$OpenSSLExePath pkcs12 -export -in "$pubKeyPath" -inkey "$($tmpRsa.FullName)" -out "$privateKeyPath" -passin "pass:$pwd" -passout "pass:$pwd" | Out-Null
$pwd = ""
 
Remove-Item $tmpPfx
Remove-Item $tmpPem
Remove-Item $tmpRsa
#END HACK

Remove-Item $certPathInStore -DeleteKey

@($(Get-ChildItem $pubKeyPath); $(Get-ChildItem $privateKeyPath))